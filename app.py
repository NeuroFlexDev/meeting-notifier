import streamlit as st
import pandas as pd
import csv
import requests
import configparser
import datetime
from collections import Counter
from telegram import Bot
import matplotlib.pyplot as plt
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = configparser.ConfigParser()
config.read("config.ini", encoding="utf-8")
BOT_TOKEN = config["TELEGRAM"]["BOT_TOKEN"]
CHAT_IDS = [int(chat.strip()) for chat in config["TELEGRAM"]["CHAT_IDS"].split(",") if chat.strip()]
bot = Bot(token=BOT_TOKEN)

# ================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏ (meetings)
# ================================================

def load_meetings():
    try:
        return pd.read_csv("meetings.csv")
    except FileNotFoundError:
        return pd.DataFrame(columns=["poll_id", "topic", "link", "thread_id", "created_at", "options", "proposed_by", "participants"])

def save_meetings(df):
    df.to_csv("meetings.csv", index=False)

def send_reminder(meeting):
    text = (
        f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ!**\n"
        f"üìå **–¢–µ–º–∞:** {meeting['topic']}\n"
        f"üîó **–°—Å—ã–ª–∫–∞:** {meeting['link']}"
    )
    for chat_id in CHAT_IDS:
        requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
        )

# ================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (stats)
# ================================================

def load_chat_activity():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å—è CSV —Å –∫–∞–≤—ã—á–∫–∞–º–∏."""
    try:
        with open("chat_activity.csv", "r", encoding="utf-8") as file:
            reader = csv.reader(file, quotechar='"', delimiter=',')
            return [row for row in reader if len(row) >= 3]  # üî• –§–∏–ª—å—Ç—Ä –Ω–∞ –º–∏–Ω–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞
    except FileNotFoundError:
        return []

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram"""
    if not text:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    return re.sub(r'([{}])'.format(re.escape(escape_chars)), r'\\\1', str(text))

def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, —ç–∫—Ä–∞–Ω–∏—Ä—É—è Markdown"""
    if not text.strip():
        print("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "MarkdownV2"
    }

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {response.json()}")
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        print(f"üì© –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç Telegram
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def load_meetings():
    try:
        return pd.read_csv("meetings.csv")
    except FileNotFoundError:
        return pd.DataFrame(columns=["poll_id", "topic", "link", "thread_id", "created_at", "options", "proposed_by", "participants"])

def load_chat_activity():
    try:
        with open("chat_activity.csv", "r", encoding="utf-8") as file:
            return [line.strip().split(",") for line in file.readlines()]
    except FileNotFoundError:
        return []

def send_stats_to_telegram():
    df = load_meetings()
    activity = load_chat_activity()

    # –ü–æ–¥—Å—á–µ—Ç –≤—Å—Ç—Ä–µ—á
    meeting_counts = df["proposed_by"].value_counts().to_dict() if not df.empty else {}
    top_meeting_creator = max(meeting_counts, key=meeting_counts.get, default="–ù–∏–∫—Ç–æ")
    total_meetings = str(len(df))  # üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

    # –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö
    chat_activity_counts = Counter(row[2] for row in activity if len(row) >= 4)
    most_active_user = max(chat_activity_counts, key=chat_activity_counts.get, default="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    total_messages = str(sum(chat_activity_counts.values()))  # üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
    # # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ
    # if total_meetings == 0 and total_messages == 0:
    #     print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    #     return

    # üìå –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n"
        f"üìÖ *–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–∏–π:* {escape_markdown(total_meetings)}\n"
        f"üëë *–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:* {escape_markdown(str(top_meeting_creator))} \\- {escape_markdown(str(meeting_counts.get(top_meeting_creator, 0)))} –≤—Å—Ç—Ä–µ—á\n"
        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö:* {escape_markdown(total_messages)}\n"
        f"üî• *–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:* {escape_markdown(str(most_active_user))} \\- {escape_markdown(str(chat_activity_counts.get(most_active_user, 0)))} —Å–æ–æ–±—â–µ–Ω–∏–π"
    ).strip()

    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:\n{text}")

    for chat_id in CHAT_IDS:
        send_message(chat_id, text)
# ================================================
# –ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ================================================
def log_chat_activity(user_id, username, message):
    if not username:
        username = f"User_{user_id}"
    with open("chat_activity.csv", "a", encoding="utf-8", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id, username, message])

# ================================================
# Streamlit –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
# ================================================
st.sidebar.title("–ú–µ–Ω—é")
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["–í—Å—Ç—Ä–µ—á–∏", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏", "–¢—Ä–µ–Ω–¥—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π"])

if page == "GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏":
    import github_stats

if page == "–¢—Ä–µ–Ω–¥—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π":
    import chat_trends

if page == "–í—Å—Ç—Ä–µ—á–∏":
    st.title("üìÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å—Ç—Ä–µ—á")
    df = load_meetings()

    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á
    if df.empty:
        st.write("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
    else:
        for index, meeting in df.iterrows():
            with st.expander(f"üìå {meeting['topic']}"):
                st.write(f"üîó **–°—Å—ã–ª–∫–∞:** {meeting['link']}")
                st.write(f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {meeting['created_at']}")
                col1, col2, col3 = st.columns(3)
                if col1.button("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å", key=f"remind_{index}"):
                    send_reminder(meeting)
                    st.success("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                if col2.button("üóë –û—Ç–º–µ–Ω–∏—Ç—å", key=f"cancel_{index}"):
                    df.drop(index, inplace=True)
                    save_meetings(df)
                    st.rerun()
                with col3:
                    if st.button("‚è≥ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", key=f"reschedule_{index}"):
                        st.session_state[f"reschedule_{index}"] = True
                if st.session_state.get(f"reschedule_{index}", False):
                    new_date = st.date_input("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É", datetime.date.today(), key=f"date_{index}")
                    new_time = st.time_input("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è", datetime.time(12, 0), key=f"time_{index}")
                    if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å", key=f"confirm_reschedule_{index}"):
                        df.at[index, "created_at"] = f"{new_date} {new_time}"
                        save_meetings(df)
                        st.session_state[f"reschedule_{index}"] = False
                        st.success("–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!")
                        st.rerun()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏
    st.subheader("‚ûï –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É")
    topic = st.text_input("üìå –¢–µ–º–∞")
    link = st.text_input("üîó –°—Å—ã–ª–∫–∞")
    date = st.date_input("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", datetime.date.today())
    time = st.time_input("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", datetime.time(12, 0))
    participants = st.text_input("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    if st.button("‚úÖ –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É"):
        new_meeting = {
            "poll_id": len(df) + 1,
            "topic": topic,
            "link": link,
            "thread_id": "",
            "created_at": f"{date} {time}",
            "options": "",
            "proposed_by": "Streamlit",
            "participants": participants
        }
        df = pd.concat([df, pd.DataFrame([new_meeting])], ignore_index=True)
        save_meetings(df)
        st.success("–í—Å—Ç—Ä–µ—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        st.rerun()

elif page == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    df = load_meetings()
    activity = load_chat_activity()

    st.subheader("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—Ä–∞–Ω–∏—è–º")
    st.write(f"**–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–∏–π:** {len(df)}")

    if not df.empty:
        st.dataframe(df[["topic", "created_at", "proposed_by"]])
        meeting_counts = df["proposed_by"].value_counts()
        fig, ax = plt.subplots()
        meeting_counts.plot(kind='bar', ax=ax, color='blue', alpha=0.7)
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á")
        ax.set_xlabel("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
        ax.set_title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤")
        st.pyplot(fig)

    st.subheader("üí¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–∞—Ö")
    if activity:

        print(activity)
        chat_activity_counts = Counter(row[2] for row in activity if len(row) >= 4)


        chat_activity_df = pd.DataFrame(chat_activity_counts.items(), columns=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–°–æ–æ–±—â–µ–Ω–∏–π"])
        chat_activity_df = chat_activity_df.sort_values("–°–æ–æ–±—â–µ–Ω–∏–π", ascending=False)

        st.dataframe(chat_activity_df)

        fig, ax = plt.subplots()
        chat_activity_df.set_index("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å").plot(kind='bar', ax=ax, color='green', alpha=0.7)
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
        ax.set_xlabel("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        ax.set_title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–∞—Ö")
        st.pyplot(fig)
    else:
        st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–∞—Ö.")

    if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram"):
        send_stats_to_telegram()
        st.success("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
