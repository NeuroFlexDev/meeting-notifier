import configparser
import datetime
import logging
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes, ConversationHandler
from logger import log_meeting

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:
# 0 - TOPIC: –≤–≤–æ–¥ —Ç–µ–º—ã –≤—Å—Ç—Ä–µ—á–∏
# 1 - LINK: –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
# 2 - THREAD: –≤–≤–æ–¥ ID —Ç–æ–ø–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# 3 - POLL_DURATION: –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
# 4 - TIME_OPTION: –≤–≤–æ–¥ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏
# 5 - PARTICIPANTS: –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
# 6 - CREATE_POLL: —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
TOPIC, LINK, THREAD, POLL_DURATION, TIME_OPTION, PARTICIPANTS, CREATE_POLL = range(7)

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
POLL_DURATION_OPTIONS = [["30", "60", "120"], ["300", "600"]]

async def schedule_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏:")
    return TOPIC

async def schedule_topic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['meeting_topic'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–¢–µ–ª–µ–º–æ—Å—Ç):")
    return LINK

async def schedule_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['meeting_link'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–ø–∏–∫, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):"
    )
    return THREAD

async def schedule_thread(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    context.user_data['thread_id'] = text if text else None
    reply_markup = ReplyKeyboardMarkup(POLL_DURATION_OPTIONS, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–æ—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):",
        reply_markup=reply_markup,
    )
    return POLL_DURATION

async def schedule_poll_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    duration_str = update.message.text.strip()
    try:
        duration = int(duration_str)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).")
        return POLL_DURATION

    context.user_data['poll_duration'] = duration
    context.user_data['time_options'] = []  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM.\n"
        "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë' –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup([["–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "–ì–æ—Ç–æ–≤–æ"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return TIME_OPTION

async def add_time_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.strip().lower() == "–≥–æ—Ç–æ–≤–æ":
        if not context.user_data.get('time_options'):
            await update.message.reply_text("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return TIME_OPTION

        chat_ids = context.bot_data.get("chat_ids", [])
        if not chat_ids:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return ConversationHandler.END
        
        group_chat_id = chat_ids[0]  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        try:
            admins = await context.bot.get_chat_administrators(chat_id=group_chat_id)
            participants = []
            for admin in admins:
                user = admin.user
                if user.username:
                    participants.append(f"@{user.username}")
                else:
                    participants.append(user.full_name)

            if not participants:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")
                return ConversationHandler.END
            
            context.user_data['available_participants'] = participants
            options_str = ", ".join(participants)
            await update.message.reply_text(
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n{options_str}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏—Ö –∏–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @ivanov, @petrov).\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö, –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º."
            )
            return PARTICIPANTS

        except Exception as e:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return ConversationHandler.END
    else:
        option_text = update.message.text.strip()
        try:
            datetime.datetime.strptime(option_text, "%Y-%m-%d %H:%M")
            context.user_data['time_options'].append(option_text)
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM.")
            return TIME_OPTION

        await update.message.reply_text(
            "–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=ReplyKeyboardMarkup([["–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "–ì–æ—Ç–æ–≤–æ"]], one_time_keyboard=True, resize_keyboard=True)
        )
        return TIME_OPTION

async def choose_participants(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        chosen = [name.strip() for name in text.split(",") if name.strip()]
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        available = context.user_data.get('available_participants', [])
        valid = [name for name in chosen if name in available]
        context.user_data['participants'] = valid
    else:
        context.user_data['participants'] = []  # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–∑–Ω–∞—á–∞–µ—Ç —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö (–∏–ª–∏ –Ω–∏–∫–æ–≥–æ)
    return await create_poll(update, context)

async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    valid_options = context.user_data.get('time_options', [])
    poll_duration = context.user_data.get('poll_duration', 60)

    # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞
    if len(valid_options) < 2:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ –æ–¥–Ω–æ –≤—Ä–µ–º—è."
        )
        return TIME_OPTION  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏

    config = configparser.ConfigParser()
    config.read('config.ini')
    chat_ids_raw = config['TELEGRAM']['CHAT_IDS']
    chat_ids = [chat.strip() for chat in chat_ids_raw.split(",") if chat.strip()]
    context.bot_data["chat_ids"] = chat_ids

    target_chat = chat_ids[0]
    thread_id = context.user_data.get("thread_id")

    if thread_id is not None:
        try:
            thread_id = int(thread_id)
        except ValueError:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è thread_id: {thread_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            thread_id = None  

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
    if thread_id:
        poll_message = await context.bot.send_poll(
            chat_id=target_chat,
            message_thread_id=thread_id,
            question="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏",
            options=valid_options,
            is_anonymous=False,
            open_period=poll_duration
        )
    else:
        poll_message = await context.bot.send_poll(
            chat_id=target_chat,
            question="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏",
            options=valid_options,
            is_anonymous=False,
            open_period=poll_duration
        )

    poll_id = poll_message.poll.id

    meeting_data = {
        "poll_id": poll_id,
        "topic": context.user_data.get("meeting_topic"),
        "link": context.user_data.get("meeting_link"),
        "thread_id": thread_id,
        "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "options": ";".join(valid_options),
        "proposed_by": update.effective_user.id,
        "participants": ", ".join(context.user_data.get("participants", []))
    }
    context.bot_data.setdefault("pending_meetings", {})[poll_id] = meeting_data
    log_meeting(meeting_data)

    if meeting_data["participants"]:
        await context.bot.send_message(
            chat_id=target_chat,
            text=f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {meeting_data['participants']}"
        )

    await update.message.reply_text(
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –û–ø—Ä–æ—Å –∑–∞–ø—É—â–µ–Ω, –∏ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def send_meeting_notification(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ context.job.context –ø–µ—Ä–µ–¥–∞–Ω—ã:
      - chat_ids: —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤,
      - meeting_topic: —Ç–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏,
      - meeting_link: —Å—Å—ã–ª–∫–∞,
      - final_time: —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏,
      - thread_id: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ID —Ç–æ–ø–∏–∫–∞,
      - participants: —Å—Ç—Ä–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è).
    """
    job_context = context.job.context
    meeting_topic = job_context.get("meeting_topic")
    meeting_link = job_context.get("meeting_link")
    final_time = job_context.get("final_time")
    chat_ids = job_context.get("chat_ids", [])
    thread_id = job_context.get("thread_id")
    participants = job_context.get("participants", "")
    text = (
        f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –≤—Å—Ç—Ä–µ—á–µ!\n"
        f"–¢–µ–º–∞: {meeting_topic}\n"
        f"–°—Å—ã–ª–∫–∞: {meeting_link}\n"
        f"–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {final_time}"
    )
    if participants:
        text += f"\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω—ã: {participants}"
    
    for chat_id in chat_ids:
        if thread_id:
            await context.bot.send_message(chat_id=chat_id, text=text, message_thread_id=int(thread_id))
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} –≤ —Ç–æ–ø–∏–∫–µ {thread_id}")
        else:
            await context.bot.send_message(chat_id=chat_id, text=text)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
