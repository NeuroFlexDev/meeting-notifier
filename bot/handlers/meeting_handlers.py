import csv
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, CallbackQueryHandler, filters

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –∏–∑ –º–æ–¥—É–ª—è meeting.py
from bot.meeting import (
    schedule_start,
    schedule_topic,
    schedule_link,
    schedule_thread,
    schedule_poll_duration,
    add_time_option,
    choose_participants,
    TOPIC, LINK, THREAD, POLL_DURATION, TIME_OPTION, PARTICIPANTS
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
from bot.logger import log_chat_activity

logger = logging.getLogger(__name__)

async def log_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user = update.effective_user
    log_chat_activity(user.id, user.username, update.message.text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—Ä–∞–Ω–∏—è—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É\n"
        "/meetings - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏\n"
        "/stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "/github_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n"
        "/trends_wordcloud - –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤ —á–∞—Ç–∞\n"
        "/noon_report - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç\n"
        "/weekly_summary - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."""
    await update.message.reply_text("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def list_meetings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    try:
        with open("meetings.csv", "r", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            meetings = list(reader)

        if not meetings:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
            return

        for meeting in meetings:
            meeting_id = meeting["poll_id"]
            text = (
                f"üìå **–¢–µ–º–∞:** {meeting['topic']}\n"
                f"üîó **–°—Å—ã–ª–∫–∞:** {meeting['link']}\n"
                f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {meeting['created_at']}\n"
            )
            if meeting.get("thread_id"):
                text += f"üìç **ID —Ç–æ–ø–∏–∫–∞:** {meeting['thread_id']}\n"

            keyboard = [
                [
                    InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data=f"remind_{meeting_id}"),
                    InlineKeyboardButton("üóë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{meeting_id}")
                ],
                [
                    InlineKeyboardButton("‚è≥ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{meeting_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")

async def remind_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ –≤ —á–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()

    meeting_id = query.data.replace("remind_", "")
    try:
        with open("meetings.csv", "r", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            meetings = {row["poll_id"]: row for row in reader}
        meeting = meetings.get(meeting_id)
        if not meeting:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        text = (
            f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ!**\n"
            f"üìå **–¢–µ–º–∞:** {meeting['topic']}\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** {meeting['link']}\n"
        )
        chat_ids = context.bot_data.get("chat_ids", [])
        for chat_id in chat_ids:
            await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")
        await query.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def cancel_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å—Ç—Ä–µ—á—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()

    meeting_id = query.data.replace("cancel_", "")
    try:
        with open("meetings.csv", "r", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            meetings = [row for row in reader if row["poll_id"] != meeting_id]

        fieldnames = ["poll_id", "topic", "link", "thread_id", "created_at", "options", "proposed_by", "participants"]
        with open("meetings.csv", "w", encoding="utf-8", newline="") as file:
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            for row in meetings:
                cleaned_row = {key: row.get(key, "") for key in fieldnames}
                writer.writerow(cleaned_row)

        await query.message.reply_text("‚úÖ –í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å—Ç—Ä–µ—á–∏: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å—Ç—Ä–µ—á–∏.")
