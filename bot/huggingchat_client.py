import os
import asyncio
import logging
from hugchat import hugchat
from hugchat.login import Login

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
HUGGING_EMAIL = os.environ.get("HUGGING_EMAIL")
HUGGING_PASSWD = os.environ.get("HUGGING_PASSWD")
cookie_path_dir = "./cookies/"  # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª–µ—à –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω

if not HUGGING_EMAIL or not HUGGING_PASSWD:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è HUGGING_EMAIL –∏/–∏–ª–∏ HUGGING_PASSWD.")

sign = Login(HUGGING_EMAIL, HUGGING_PASSWD)
cookies = sign.login(cookie_dir_path=cookie_path_dir, save_cookies=True)
chatbot = hugchat.ChatBot(cookies=cookies.get_dict())

async def generate_and_send_message(context, prompt: str, caption: str = "") -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HuggingChat –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã –∏–∑ bot_data["chat_ids"].
    """
    try:
        response = await asyncio.to_thread(chatbot.chat, prompt)
        generated_text = response.wait_until_done().strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ hugging-chat-api: {e}")
        generated_text = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}"

    chat_ids = context.application.bot_data.get("chat_ids", [])
    for chat_id in chat_ids:
        await context.bot.send_message(chat_id=chat_id, text=f"{caption}\n\n{generated_text}")

async def morning_message(context) -> None:
    prompt = "–°—Ñ–æ—Ä–º–∏—Ä—É–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å."
    await generate_and_send_message(context, prompt, caption="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!")

async def evening_message(context) -> None:
    prompt = "–°–æ—Å—Ç–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ–º –∏—Ç–æ–≥–æ–≤ –¥–Ω—è, –≤—ã–¥–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å."
    await generate_and_send_message(context, prompt, caption="üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!")

async def noon_report(context) -> None:
    prompt = ("–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ "
              "–æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.")
    await generate_and_send_message(context, prompt, caption="üïõ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç")

async def weekly_summary(context) -> None:
    # –ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
    import pandas as pd
    try:
        meetings_df = pd.read_csv("meetings.csv")
    except Exception:
        meetings_df = pd.DataFrame(columns=["poll_id", "topic", "link", "thread_id", "created_at", "options", "proposed_by", "participants"])
    
    total_meetings = len(meetings_df)
    top_creator = meetings_df["proposed_by"].mode()[0] if not meetings_df.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    topics = meetings_df["topic"].unique().tolist() if not meetings_df.empty else []
    
    prompt = (f"–°—Ñ–æ—Ä–º–∏—Ä—É–π –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É:\n"
              f"- –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {total_meetings}\n"
              f"- –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {top_creator}\n"
              f"- –û–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã: {', '.join(topics)}\n\n"
              "–û–ø–∏—à–∏ —Å–≤–æ–¥–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ñ–æ—Ä–º–µ.")
    await generate_and_send_message(context, prompt, caption="üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞")
