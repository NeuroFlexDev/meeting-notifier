import configparser
import logging
import csv
import io
import datetime
import re
from collections import Counter

import requests
import pandas as pd
import matplotlib.pyplot as plt

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    PollHandler,
    ContextTypes,
    filters,
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—Å—Ç—Ä–µ—á
from meeting import (
    schedule_start,
    schedule_topic,
    schedule_link,
    schedule_thread,
    schedule_poll_duration,
    add_time_option,
    create_poll,
    choose_participants,
    send_meeting_notification,
    TOPIC,
    LINK,
    THREAD,
    POLL_DURATION,
    TIME_OPTION,
    PARTICIPANTS
)
from poll_handler import poll_handler
from logger import log_chat_activity

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è GitHub –∏ —Ç—Ä–µ–Ω–¥–æ–≤
from abeona_log import (
    fetch_github_repos,
    analyze_github_stats,
    generate_github_bar_chart,
    load_chat_activity,
    analyze_trends,
    generate_neuroflex_wordcloud
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
from app import send_stats_to_telegram

# –ò–º–ø–æ—Ä—Ç cohere –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
import cohere
COHERE_API_KEY = "0abiLXNoDdCyXTRLNhtwnYPsgRpoiwpmHUyZiy67  "  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á
co = cohere.ClientV2(COHERE_API_KEY)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Cohere -----------------

async def generate_and_send_message(context: ContextTypes.DEFAULT_TYPE, prompt: str, caption: str = "") -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Cohere –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã –∏–∑ bot_data["chat_ids"].
    """
    try:
        response = co.chat(
            model="command-r-plus", 
            messages=[{"role": "user", "content": prompt}]
        )
        generated_text = response.generations[0].text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Cohere: {e}")
        generated_text = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}"

    chat_ids = context.application.bot_data.get("chat_ids", [])
    for chat_id in chat_ids:
        await context.bot.send_message(chat_id=chat_id, text=f"{caption}\n\n{generated_text}")

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

async def morning_message(context: ContextTypes.DEFAULT_TYPE) -> None:
    prompt = "–°—Ñ–æ—Ä–º–∏—Ä—É–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å."
    await generate_and_send_message(context, prompt, caption="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!")

async def evening_message(context: ContextTypes.DEFAULT_TYPE) -> None:
    prompt = "–°–æ—Å—Ç–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ–º –∏—Ç–æ–≥–æ–≤ –¥–Ω—è, –≤—ã–¥–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å."
    await generate_and_send_message(context, prompt, caption="üåá –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!")

async def noon_report(context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å
    prompt = ("–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ "
              "–æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.")
    await generate_and_send_message(context, prompt, caption="üïõ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç")

async def weekly_summary(context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–∏–º–µ—Ä —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –ª–æ–≥–∏–∫—É)
    try:
        meetings_df = pd.read_csv("meetings.csv")
    except Exception:
        meetings_df = pd.DataFrame(columns=["poll_id", "topic", "link", "thread_id", "created_at", "options", "proposed_by", "participants"])

    total_meetings = len(meetings_df)
    top_creator = meetings_df["proposed_by"].mode()[0] if not meetings_df.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    topics = meetings_df["topic"].unique().tolist() if not meetings_df.empty else []
    
    prompt = (f"–°—Ñ–æ—Ä–º–∏—Ä—É–π –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É:\n"
              f"- –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {total_meetings}\n"
              f"- –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {top_creator}\n"
              f"- –û–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ç–µ–º—ã: {', '.join(topics)}\n\n"
              "–û–ø–∏—à–∏ —Å–≤–æ–¥–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ñ–æ—Ä–º–µ.")
    await generate_and_send_message(context, prompt, caption="üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞")

# ----------------- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á -----------------
async def log_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–∞—Ö."""
    user = update.effective_user
    log_chat_activity(user.id, user.username, update.message.text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—Ä–∞–Ω–∏—è—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É\n"
        "/meetings - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏\n"
        "/stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "/github_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤\n"
        "/trends_wordcloud - –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤ —á–∞—Ç–∞\n"
        "/noon_report - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç\n"
        "/weekly_summary - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."""
    await update.message.reply_text("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def list_meetings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    try:
        with open("meetings.csv", "r", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            meetings = list(reader)

        if not meetings:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
            return

        for meeting in meetings:
            meeting_id = meeting["poll_id"]
            text = (
                f"üìå **–¢–µ–º–∞:** {meeting['topic']}\n"
                f"üîó **–°—Å—ã–ª–∫–∞:** {meeting['link']}\n"
                f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {meeting['created_at']}\n"
            )
            if meeting.get("thread_id"):
                text += f"üìç **ID —Ç–æ–ø–∏–∫–∞:** {meeting['thread_id']}\n"

            keyboard = [
                [
                    InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å", callback_data=f"remind_{meeting_id}"),
                    InlineKeyboardButton("üóë –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{meeting_id}")
                ],
                [
                    InlineKeyboardButton("‚è≥ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule_{meeting_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")

async def remind_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ –≤ —á–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()

    meeting_id = query.data.replace("remind_", "")
    with open("meetings.csv", "r", encoding="utf-8") as file:
        reader = csv.DictReader(file)
        meetings = {row["poll_id"]: row for row in reader}

    meeting = meetings.get(meeting_id)
    if not meeting:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    text = (
        f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ!**\n"
        f"üìå **–¢–µ–º–∞:** {meeting['topic']}\n"
        f"üîó **–°—Å—ã–ª–∫–∞:** {meeting['link']}\n"
    )

    chat_ids = context.bot_data.get("chat_ids", [])
    for chat_id in chat_ids:
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")

    await query.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

async def cancel_meeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å—Ç—Ä–µ—á—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
    query = update.callback_query
    await query.answer()

    meeting_id = query.data.replace("cancel_", "")
    with open("meetings.csv", "r", encoding="utf-8") as file:
        reader = csv.DictReader(file)
        meetings = [row for row in reader if row["poll_id"] != meeting_id]

    fieldnames = ["poll_id", "topic", "link", "thread_id", "created_at", "options", "proposed_by", "participants"]
    with open("meetings.csv", "w", encoding="utf-8", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        for row in meetings:
            cleaned_row = {key: row.get(key, "") for key in fieldnames}
            writer.writerow(cleaned_row)

    await query.message.reply_text("‚úÖ –í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram."""
    send_stats_to_telegram()
    await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç—ã!")

# ----------------- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è GitHub –∏ —Ç—Ä–µ–Ω–¥–æ–≤ -----------------
async def github_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /github_stats –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ GitHub.
    """
    try:
        repos = fetch_github_repos("NeuroFlexDev")
        df = analyze_github_stats(repos)
        buf = generate_github_bar_chart(df, "–ó–≤–µ–∑–¥—ã", "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ –∑–≤–µ–∑–¥–∞–º")
        await update.message.reply_photo(photo=buf, caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ GitHub")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ GitHub: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ GitHub: {e}")

async def trends_wordcloud_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /trends_wordcloud –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π.
    """
    try:
        df = load_chat_activity("chat_activity.csv")
        trends = analyze_trends(df)
        if not trends:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.")
            return
        buf = generate_neuroflex_wordcloud(trends, "neuroflex_mask.png")
        await update.message.reply_photo(photo=buf, caption="–û–±–ª–∞–∫–æ —Å–ª–æ–≤ (—Ç—Ä–µ–Ω–¥—ã –≤ —á–∞—Ç–∞—Ö)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ wordcloud: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ wordcloud: {e}")

# ----------------- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ -----------------

async def noon_report_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /noon_report –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.
    """
    await noon_report(context)

async def weekly_summary_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /weekly_summary –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏.
    """
    await weekly_summary(context)

# ----------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----------------
def main() -> None:
    config = configparser.ConfigParser()
    config.read("config.ini", encoding="utf-8")

    bot_token = config.get("TELEGRAM", "BOT_TOKEN", fallback=None)
    chat_ids_raw = config.get("TELEGRAM", "CHAT_IDS", fallback="")

    try:
        chat_ids = [int(chat.strip()) for chat in chat_ids_raw.split(",") if chat.strip()]
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è CHAT_IDS –≤ int: {e}")
        chat_ids = []

    if not chat_ids:
        logger.error("‚ùå –û—à–∏–±–∫–∞: CHAT_IDS –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.ini.")
    else:
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ CHAT_IDS: {chat_ids}")

    application = Application.builder().token(bot_token).build()
    application.bot_data["chat_ids"] = chat_ids

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("schedule", schedule_start)],
        states={
            TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_topic)],
            LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_link)],
            THREAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_thread)],
            POLL_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_poll_duration)],
            TIME_OPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_time_option)],
            PARTICIPANTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_participants)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(PollHandler(poll_handler))
    application.add_handler(CommandHandler("meetings", list_meetings))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CallbackQueryHandler(remind_meeting, pattern="^remind_"))
    application.add_handler(CallbackQueryHandler(cancel_meeting, pattern="^cancel_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_message))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è GitHub –∏ —Ç—Ä–µ–Ω–¥–æ–≤
    application.add_handler(CommandHandler("github_stats", github_stats_handler))
    application.add_handler(CommandHandler("trends_wordcloud", trends_wordcloud_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
    application.add_handler(CommandHandler("noon_report", noon_report_handler))
    application.add_handler(CommandHandler("weekly_summary", weekly_summary_handler))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ JobQueue
    job_queue = application.job_queue

    # –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 9:00
    job_queue.run_daily(morning_message, time=datetime.time(hour=9, minute=0, second=0))
    # –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 18:00
    job_queue.run_daily(evening_message, time=datetime.time(hour=18, minute=0, second=0))
    # –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç ‚Äì –≤ 12:00
    job_queue.run_daily(noon_report, time=datetime.time(hour=12, minute=0, second=0))
    # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ ‚Äì –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00
    job_queue.run_daily(
        weekly_summary,
        time=datetime.time(hour=20, minute=0, second=0),
        days=(6,)  # –¢–æ–ª—å–∫–æ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
    )

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
